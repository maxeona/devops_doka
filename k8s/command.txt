Проверка сертов
***********************************************
kubeadm alpha certs check-expiration --config="/etc/kubernetes/kubeadm-config.yaml"
или
cat /etc/kubernetes/pki/*.crt | openssl x509 -noout -enddate 
или 
kubeadm certs check-expiration

ПОЧИТАТЬ
https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-certs/

kubeadm certs renew all - обновление всех сертов через кубадм(после этого неоьходимо перенести все ключевые компоненты в другую папку на время, а потом вернуть назад,
эдакий релоад)

kubectl create namespace <insert-namespace-name-here> - создание неймспейса

Через манифест
********************************************
apiVersion: v1
kind: Namespace
metadata:
  name: <insert-namespace-name-here>
  
********************************************
kubectl create -f ./my-namespace.yaml - создание нс

kubectl delete namespaces <insert-some-namespace-name>

kubectl delete -f {name}.yaml удаляют всю связку сушностей, описанных в файле 

****************************************************************
Системные показатели
****************************************************************
kubectl top nodes
****************************************************************
Работа с квотами в пространстве
****************************************************************
Манифест:
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mem-cpu-demo  {name quota}
spec:
  hard:
    requests.cpu: "1000m"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
*********************************************
kubectl apply -f ./{file_with_manifest}.yaml -n {namespace}
kubectl get resourcequota {name_quota} -{namepace} --output=yaml
kubectl edit resourcequota {name_quota} -n {namespace}
kubectl api-resources - получение списка Kubernetes apiGroups  (или)
kubectl api-resources -o wide

****************************************************
RBAC
****************************************************
Генерация ключа пользователя OpenSSL
openssl genrsa -out {name}.key 4096

openssl req -new -key {name}.key -out {name}.csr -subj "/CN={name}"

openssl x509 -req -in {name}.csr -CA CA_LOCATION/ca.crt -CAkey CA_LOCATION/ca.key -CAcreateserial -out {name}.crt -days 500 (на 500 дней, предполагаю, можно убрать нахой)
CA_LOCATION - центр сертификации (ЦС) кластера Kubernetes. default this is /etc/kubernetes/pki/ 

********************************************************
РАБОТА С КОНФИГАМИ 
********************************************************
Создание нового кластера в конфигурацию:
kubectl config --kubeconfig=./config set-cluster k8s --server=https://{ip}:6443 --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true

Добавление нового пользователя:
kubectl config --kubeconfig=./config set-credentials {name_new_user} --client-key={name_new_user}.key --client-certificate={name_new_user}.crt --embed-certs=true

Добавление контекста: 
kubectl config --kubeconfig=./config set-context {name_context} --cluster=k8s --user={name_new_user} --namespace {name_ns}
Контекст связывает пользователя и кластер 

kubectl describe secrets -n {ns} $(kubectl -n {ns} get secret | awk '/dashboard-admin/{print $1}')
ns-our namespace where is new sa

kubectl auth can-i get deployment -as system:serviceaccount:dev:alice - разобрать 
kubectl cordon {node_name}  - Отметить узел, как неназначаемый
kubectl uncordon {node_name} - Отметить узел, как назначаемый (снять предыдущее действие)
####################################################################################################################################################
HELM
####################################################################################################################################################
